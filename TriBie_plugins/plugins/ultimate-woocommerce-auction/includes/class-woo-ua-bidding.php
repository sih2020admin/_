<?php/** * Notes  Bid Class * * @package Ultimate WooCommerce Auction * @author Nitesh Singh  * @since 1.0 */class Woo_Ua_Bid {	public $bid;	/**	* Constructor for Loads options and hooks in the init method.	*		*/	public function __construct() {				add_action('init', array($this, 'init'), 5);	}	/**		 * Load bid data while Wordpress init and hooks in method.	 *		 */	public function init() {	}	/**	* Place bid On Auction Product	*	* @param string Product id and Bid Value	* @return bool	* 	*/	public function placebid( $product_id, $bid ) {		global $product_data;				$log_history_bid_id = false;				$product_data = wc_get_product($product_id);				if (!is_user_logged_in()) {			wc_add_notice(sprintf(__('Please sign in to place your bid or buy the product. <a href="%s" class="button">Login &rarr;</a>', 'woo_ua'), get_permalink(wc_get_page_id('myaccount'))), 'error');			return false;		}		if ($bid <= 0) {						wc_add_notice(sprintf(__('Please enter a value greater than 0!', 'woo_ua'), get_permalink(wc_get_page_id('myaccount'))), 'error');			return false;		}						// Check if auction product expired		if ($product_data -> is_woo_ua_closed()) {			wc_add_notice( sprintf( __( 'This auction &quot;%s&quot; has expired', 'woo_ua' ), $product_data -> get_title()), 'error' );			return false;		}		// Check Stock		if (!$product_data -> is_in_stock()) {			wc_add_notice(sprintf(__('You cannot place a bid for &quot;%s&quot; because the product is out of stock.', 'woo_ua'), $product_data -> get_title()),'error');			return false;		}		$current_user = wp_get_current_user();		$auction_type = $product_data->get_woo_ua_auction_type();				// Checking Current Bidder is highest bidder		//THis logic removed from free plugin 		/*if ($current_user->ID == $product_data->get_woo_ua_auction_current_bider()) {			wc_add_notice(sprintf(__('No need to other bid. Your bid is winning!', 'woo_ua'), $product_data->get_title()));			return false;					}*/		if ($auction_type == 'normal') {			if ( $product_data->woo_ua_bid_value() <= ($bid )) {				    					$curent_bid = $product_data -> get_woo_ua_current_bid();					update_post_meta($product_id, 'woo_ua_auction_current_bid', $bid);					update_post_meta($product_id, 'woo_ua_auction_current_bider', $current_user->ID);					update_post_meta($product_id, 'woo_ua_auction_bid_count', absint($product_data->get_woo_ua_auction_bid_count() + 1));										$log_history_bid_id = $this -> log_history_bid($product_id, $bid, $current_user);													} else {						    	wc_add_notice(sprintf(__('Please enter a bid value for &quot;%s&quot; greater than the current bid. Your bid must be at least %s ', 'woo_ua'), $product_data -> get_title(),wc_price($product_data -> woo_ua_bid_value())),'error');				return false;			}		}  else {			wc_add_notice(sprintf(__('There was no bid Placed', 'woo_ua'), $product_data -> get_title()),'error');			return false;		}		do_action('woo_ua_auctions_place_bid', array( 'product_id' => $product_id ,'log_id' => $log_history_bid_id ));		return true;	}    /**     * Adding Bid Data To Log History     *     * @param string, int     * @return void     *      */	public function log_history_bid($product_id, $bid, $current_user, $proxy = 0) {				global $wpdb;		$log_history_bid_id = false;		$log_history_bid = $wpdb -> insert($wpdb -> prefix . 'woo_ua_auction_log', array('userid' => $current_user->ID, 'auction_id' => $product_id, 'bid' => $bid, 'proxy' => $proxy , 'date' => current_time('mysql')), array('%d', '%d', '%f', '%d' , '%s'));		if($log_history_bid){			$log_history_bid_id = $wpdb->insert_id;		}			return $log_history_bid_id ;	}}