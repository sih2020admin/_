<?php 	/**	* Load Text Domain	* 	* This gets the plugin ready for translation.	* 	* @package Ultimate WooCommerce Auction	* @author Nitesh Singh 	* @since 1.0	*/	add_action( 'init', 'woo_ua_plugins_textdomain' );		function woo_ua_plugins_textdomain() {				// Set filter for plugin's languages directory		$lang_dir	= dirname( plugin_basename( __FILE__ ) ) . '/languages/';		$lang_dir	= apply_filters( 'woo_ua_languages_directory', $lang_dir );				// Traditional WordPress plugin locale filter		$locale	= apply_filters( 'plugin_locale',  get_locale(), 'woo_ua' );		$mofile	= sprintf( '%1$s-%2$s.mo', 'woo_ua', $locale );				// Setup paths to current locale file		$mofile_local	= $lang_dir . $mofile;		$mofile_global	= WP_LANG_DIR . '/' . WOO_UA_PLUGIN_BASENAME . '/' . $mofile;				if ( file_exists( $mofile_global ) ) { // Look in global /wp-content/languages/woo-ultimate-auction folder					load_textdomain( 'woo_ua', $mofile_global );					} elseif ( file_exists( $mofile_local ) ) { // Look in local plugins/woo-ultimate-auction/languages/ folder					load_textdomain( 'woo_ua', $mofile_local );					} else { // Load the default language files					load_plugin_textdomain( 'woo_ua', false, $lang_dir );		}	}	/**	* Activation Hook	* 	* Register plugin activation hook.	* 	* @package Ultimate WooCommerce Auction	* @author Nitesh Singh 	* @since 1.0	*/	  register_activation_hook( __FILE__, 'woo_ua_install' );	/**	* Plugin Setup (On Activation)	* 	* Does the initial setup,	* sets default values for the plugin options.	* @package Ultimate WooCommerce Auction	* @author Nitesh Singh 	* @since 1.0	*/	function woo_ua_install() {			global $wpdb;	}	/**	* Deactivation Hook	* 	* Register plugin deactivation hook.	* 	* @package Ultimate WooCommerce Auction	* @author Nitesh Singh 	* @since 1.0	*/	register_deactivation_hook( __FILE__, 'woo_ua_uninstall' );	/**	* Plugin Setup (On Deactivation)	* 	* Delete  plugin options.	* 	* @package Ultimate WooCommerce Auction	* @author Nitesh Singh 	* @since 1.0	*/	function woo_ua_uninstall() {		global $wpdb;			}	/**	* Global Variables	* 	* Declaration of some needed global varibals for plugin	*	* @package Ultimate WooCommerce Auction	* @author Nitesh Singh 	* @since 1.0	*/	global $woo_ua_script, $woo_ua_model, $woo_ua_shortcodes, 		$woo_ua_admin, $woo_ua_public;	/**	* Includes Files	* 	* Includes required files for plugin	*	* @package Ultimate WooCommerce Auction	* @author Nitesh Singh 	* @since 1.0	*/ 	add_action( 'init', 'woo_ua_include_files' );		function woo_ua_include_files(){				// loads the Misc Functions file		 require_once ( WOO_UA_DIR . '/includes/woo-ua-misc-functions.php' );		 		// Scripts class to handle scripts functionality		require_once( WOO_UA_DIR . '/includes/class-woo-ua-scripts.php' );				// Admin class to handle admin side functionality		require_once( WOO_UA_ADMIN . '/class-woo-ua-admin.php' );				//front side template		require_once( WOO_UA_DIR . '/includes/class-woo-ua-front.php' );		//Bidding Class File		require_once ( WOO_UA_DIR . '/includes/class-woo-ua-bidding.php' );				//Ajax handle		require_once ( WOO_UA_DIR . '/includes/class-woo-ua-ajax.php' );				//Database Handling		require_once ( WOO_UA_DIR . '/includes/woo_ua_db.php' );	} 	/**	* Create Auction Product Type	* 	* Includes required files for plugin	*	* @package Ultimate WooCommerce Auction	* @author Nitesh Singh 	* @since 1.0	*/ 	add_action( 'init', 'woo_ua_create_auction_product_type' );		function woo_ua_create_auction_product_type(){				require_once ( WOO_UA_DIR . '/includes/class-woo-product-auction.php' );	}	/**	* Add Class for  Auction Product Type	* 	* Includes required files for plugin	*	* @package Ultimate WooCommerce Auction	* @author Nitesh Singh 	* @since 1.0	*/ 	add_filter( 'woocommerce_product_class', 'woo_ua_woocommerce_product_class', 10, 2 ); 		function woo_ua_woocommerce_product_class( $classname, $product_type ) {		if ( $product_type == 'auction' ) { 				$classname = 'Woo_Ua_Product_Auction';				}				return $classname;	}	/**	*To override templates within a plugin, two filters are provided by WooCommerce, ' woocommerce_locate_template' and  	'wc_get_template_part'. 	*Create a subfolder named 'woocommerce' inside the plugin folder, and place there custom templates. 	*Templates will be loaded in the following hierarchy: 	*plugin/template_path/template_name 	*default/template_name	* @package Ultimate WooCommerce Auction	* @author Nitesh Singh 	* @since 1.0	*/		add_filter('woocommerce_locate_template', 'woo_ua_woocommerce_locate_template', 10, 3);		/**	* Templating with plugin folder	*	* @param int $post_id the post (product) identifier	* @param stdClass $post the post (product)	* @package Ultimate WooCommerce Auction	* @author Nitesh Singh 	* @since 1.0	*	*/	function woo_ua_woocommerce_locate_template($template, $template_name, $template_path) {		global $woocommerce;			if (!$template_path) { 						  $template_path = $woocommerce->template_url;			}			$plugin_path = WOO_UA_TEMPLATE.'woocommerce/';			$template_locate = locate_template( array( $template_path . $template_name, $template_name ) );			// Modification: Get the template from this plugin, if it exists			if (!$template_locate && file_exists($plugin_path . $template_name)) {			return $plugin_path . $template_name;			} else { 						return $template;			}	}		/**	*  Init Hook For Place Bid Button Click.	*	* @package Ultimate WooCommerce Auction	* @author Nitesh Singh 	* @since 1.0		*/			add_action('init', 'woo_ua_auctions_place_bid');		/**	* Function For Place Bid Button Click.	*	* @package Ultimate WooCommerce Auction	* @author Nitesh Singh 	* @since 1.0		*/			function woo_ua_auctions_place_bid( $url = false ) {				if (empty($_REQUEST['wua-place-bid']) || !is_numeric($_REQUEST['wua-place-bid'])) {			return;		}				global $woocommerce;			$product_id = apply_filters('wua_place_bid_product_id', absint($_REQUEST['wua-place-bid']));		$bid = apply_filters('wua_place_bid', abs(round(str_replace(',', '.', $_REQUEST['wua_bid_value']), wc_get_price_decimals())));						$was_place_bid = false;		$placed_bid = array();		$placing_bid = wc_get_product($product_id);		$product_type = method_exists( $placing_bid, 'get_type') ? $placing_bid->get_type() : $placing_bid->product_type;		$place_bid_handler = apply_filters('wua_place_bid_handler', $product_type, $placing_bid);		$quantity = 1;		$product_data = wc_get_product($product_id);							$outbiddeduser = $placing_bid->get_woo_ua_auction_current_bider();										if ('auction' === $place_bid_handler) {		$Woo_Ua_Bid = new Woo_Ua_Bid;  // correct	   			// Placing Bid			if ($Woo_Ua_Bid->placebid($product_id, $bid)) {				woo_ua_bid_place_message($product_id);				$was_place_bid = true;				$placed_bid[] = $product_id;										$current_user = wp_get_current_user();									//Send Notification to Bidder/Admin				if($was_place_bid){					WC()->mailer();					   //bid placed notification to bidder						do_action('woo_ua_auctions_bid_place_email', $current_user->ID, $placing_bid);						//bid placed notification to admin						do_action('woo_ua_auctions_bid_place_email_admin', $placing_bid);																	if(!empty($outbiddeduser)){														//send mail to outbiddeduser user							do_action( 'woo_ua_auctions_outbid_bid_email', $outbiddeduser,$placing_bid);														//send mail to Admin							do_action( 'woo_ua_auctions_outbid_bid_email_admin',$placing_bid);																				}										}											}			if (version_compare($woocommerce->version, '2.1', ">=")) {				if (wc_notice_count('error') == 0) {					wp_safe_redirect(esc_url(remove_query_arg(array('wua-place-bid', 'quantity', 'product_id'), wp_get_referer())));					exit;				}				return;			} else {				wp_safe_redirect(esc_url(remove_query_arg(array('wua-place-bid', 'quantity', 'product_id'), wp_get_referer())));				exit;			}		} else {			wc_add_notice(__('This product is not Auction', 'woo_ua'), 'error');			return;		}			}				/**	* Add Woocoomrce Init  Action my Auction Page In my-account page front Side	*	* @package Ultimate WooCommerce Auction	* @author Nitesh Singh 	* @since 1.0		*/		add_action('woocommerce_init', 'woo_ua_action_my_auction_page_init');		/**	* Function For My Auction Page On My Account Page	*	* @package Ultimate WooCommerce Auction	* @author Nitesh Singh 	* @since 1.0		*/		if( !( function_exists('woo_ua_action_my_auction_page_init')) ){				function woo_ua_action_my_auction_page_init(){      					require_once ( WOO_UA_DIR . '/includes/class-my-auction.php' );					 }   }      /**	* Add Woocoomrce Init  Action My Auction Watchlist Page In my-account page front Side	*	* @package Ultimate WooCommerce Auction	* @author Nitesh Singh 	* @since 1.0		*/		add_action('woocommerce_init', 'woo_ua_action_my_auction_watchlist_page_init');		/**	* Function For My Auction Watchlist Page On My Account Page	*	* @package Ultimate WooCommerce Auction	* @author Nitesh Singh 	* @since 1.0		*/		if( !( function_exists('woo_ua_action_my_auction_watchlist_page_init')) ){				function woo_ua_action_my_auction_watchlist_page_init(){      					require_once ( WOO_UA_DIR . '/includes/class-my-auction-watchlist.php' );					 }   }      /**	* Add Cron Init setting	*	* @package Ultimate WooCommerce Auction	* @author Nitesh Singh 	* @since 1.0		*/      add_action('plugins_loaded', 'woo_ua_cron_job');      /**	* callback to change the auction status	*	* @package Ultimate WooCommerce Auction	* @author Nitesh Singh 	* @since 1.0		*/       add_action('scheduled_woo_ua_update_status', 'woo_ua_update_status_callback', 10);		/**	* Delete all cron 	*	* @package Ultimate WooCommerce Auction	* @author Nitesh Singh 	* @since 1.0		*/   	add_action('scheduled_woo_ua_delete_completed_actions', 'woo_ua_delete_completed_actions_callback', 10); 	   /**	* Cron Init While plugin Load	*	* @package Ultimate WooCommerce Auction	* @author Nitesh Singh 	* @since 1.0		*/   function woo_ua_cron_job(){	   			$args = array(				'type' => 'auction',				'status' => 'publish',			);			$query = new WC_Product_Query( $args );			$auction_products = $query->get_products();					$cron_check = get_option('woo_ua_cron_initiated');			if( !empty( $auction_products ) ){							if( !$cron_check  ){					woo_ua_cron_initiate($configured=false);				}				if( $cron_check  )				{					woo_ua_cron_initiate($configured=true);				}			}			elseif( !$cron_check ){				woo_ua_cron_initiate($configured=false);			}   }      /**	* Cron Iinitiate	*	* @package Ultimate WooCommerce Auction	* @author Nitesh Singh 	* @since 1.0		*/     function woo_ua_cron_initiate($configured){	  	        // configuration for cron 1        $update_status_interval = get_option('woo_ua_cron_auction_status');		        if( isset($update_status_interval) && !empty($update_status_interval)){			            $update_interval = $update_status_interval;			        }else{			            $update_interval = 2;        }         $cron_1_interval = woo_ua_minutes_converter($update_interval);		         // configuration for cron 2        $sent_email_interval = get_option('woo_ua_cron_auction_email');		        if(isset($sent_email_interval) && !empty($sent_email_interval)){			            $sent_interval = $sent_email_interval;        }else{            $sent_interval =4;        }         $cron_2_interval =  woo_ua_minutes_converter($sent_interval);        if($configured){            woo_ua_delete_prv_actions();        }else{            update_option('woo_ua_cron_initiated','yes');        }			      wc_schedule_recurring_action(strtotime(time()),$cron_1_interval,'scheduled_woo_ua_update_status');      wc_schedule_recurring_action(strtotime(time()),'43200','scheduled_woo_ua_delete_completed_actions');      	} 	/**	* Delete Cron While pending 	*	* @package Ultimate WooCommerce Auction	* @author Nitesh Singh 	* @since 1.0		*/		function woo_ua_delete_prv_actions()	{		//find sheduler posts		$args1                           = array(			'posts_per_page' => -1,			'post_title' => 'scheduled_woo_ua_update_status',			'post_type' => 'scheduled-action',			'post_status' => 'pending',			'fields' => 'ids'		);		$scheduled_update_status_actions = get_posts($args1);		// echo '<pre>'.print_r($scheduled_update_status_actions,1).'</pre>';exit;		if (!empty($scheduled_update_status_actions)) {			foreach ($scheduled_update_status_actions as $auc_id) {				wp_delete_post($auc_id);			}					}				do_action('woo_ua_reset_other_scheduled_events'); // delete other cron scheduled if added			}	/**	* Cron checking And make close auction and send mail	*	* @package Ultimate WooCommerce Auction	* @author Nitesh Singh 	* @since 1.0		*/		function woo_ua_update_status_callback()	{		global $wpdb;		set_time_limit(0);				ignore_user_abort(1);				global $woocommerce;			   $num_of_auctions = get_option('woo_ua_cron_auction_status_number', true);		if (isset($num_of_auctions) && !empty($num_of_auctions)) {			$auc_no = $num_of_auctions;		} else {			$auc_no = 25;		}							$args = array(							'post_type' => 'product',							'posts_per_page' => $auc_no,							'meta_query' => array(								'relation' => 'AND', // Optional, defaults to "AND"								array(									'key'     => 'woo_ua_auction_closed',									'compare' => 'NOT EXISTS',								),								array(									'key' => 'woo_ua_auction_end_date',									'compare' => 'EXISTS',								),							),							'meta_key' => 'woo_ua_auction_end_date',							'orderby' => 'meta_value',							'order' => 'ASC',							'tax_query' => array(array('taxonomy' => 'product_type', 'field' => 'slug', 'terms' => 'auction')),							'auction_arhive' => TRUE,							'show_past_auctions' => TRUE,							'show_future_auctions' => TRUE,						);													$the_query = new WP_Query($args);							$time = microtime(1);							if ($the_query->have_posts()) {								while ($the_query->have_posts()): $the_query->the_post();									$product_data = wc_get_product($the_query->post->ID);									if (method_exists( $product_data, 'get_type') && $product_data->get_type() == 'auction' ) {										$product_data->is_woo_ua_closed();									}								endwhile;							}											}	/**	* Delete all Action while cron done	*	* @package Ultimate WooCommerce Auction	* @author Nitesh Singh 	* @since 1.0		*/	function woo_ua_delete_completed_actions_callback(){		$status_args = array(		                    'hook' =>'scheduled_woo_ua_update_status',							'per_page' =>-1,							'status' =>'complete',							'orderby' => 'date',							'order' => 'ASC'							);		$status_arr =wc_get_scheduled_actions( $status_args,'ids');			if(!empty( $status_arr )){				foreach($status_arr as $pid){						wp_delete_post( $pid  );				}			}		$complete_args = array(							'hook' =>'scheduled_woo_ua_delete_completed_actions',							'per_page' =>-1,							'status' =>'complete',							'orderby' => 'date',							'order' => 'ASC'							);									$complete_arr =wc_get_scheduled_actions( $complete_args,'ids');			if(!empty( $complete_arr )){				foreach($complete_arr as $pid){					wp_delete_post( $pid  );				}			}	}  		/**	* Function For Converting min To sec	*	* @package Ultimate WooCommerce Auction	* @author Nitesh Singh 	* @since 1.0		*/ 	  	function woo_ua_minutes_converter($interval){		return $interval*60; // coverting into sec	}  